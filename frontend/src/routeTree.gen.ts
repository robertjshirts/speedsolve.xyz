/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SoloImport } from './routes/solo'
import { Route as QueueImport } from './routes/queue'
import { Route as MultiImport } from './routes/multi'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as PUsernameImport } from './routes/p.$username'

// Create/Update Routes

const SoloRoute = SoloImport.update({
  id: '/solo',
  path: '/solo',
  getParentRoute: () => rootRoute,
} as any)

const QueueRoute = QueueImport.update({
  id: '/queue',
  path: '/queue',
  getParentRoute: () => rootRoute,
} as any)

const MultiRoute = MultiImport.update({
  id: '/multi',
  path: '/multi',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PUsernameRoute = PUsernameImport.update({
  id: '/p/$username',
  path: '/p/$username',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/multi': {
      id: '/multi'
      path: '/multi'
      fullPath: '/multi'
      preLoaderRoute: typeof MultiImport
      parentRoute: typeof rootRoute
    }
    '/queue': {
      id: '/queue'
      path: '/queue'
      fullPath: '/queue'
      preLoaderRoute: typeof QueueImport
      parentRoute: typeof rootRoute
    }
    '/solo': {
      id: '/solo'
      path: '/solo'
      fullPath: '/solo'
      preLoaderRoute: typeof SoloImport
      parentRoute: typeof rootRoute
    }
    '/p/$username': {
      id: '/p/$username'
      path: '/p/$username'
      fullPath: '/p/$username'
      preLoaderRoute: typeof PUsernameImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/multi': typeof MultiRoute
  '/queue': typeof QueueRoute
  '/solo': typeof SoloRoute
  '/p/$username': typeof PUsernameRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/multi': typeof MultiRoute
  '/queue': typeof QueueRoute
  '/solo': typeof SoloRoute
  '/p/$username': typeof PUsernameRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/multi': typeof MultiRoute
  '/queue': typeof QueueRoute
  '/solo': typeof SoloRoute
  '/p/$username': typeof PUsernameRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/multi' | '/queue' | '/solo' | '/p/$username'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/multi' | '/queue' | '/solo' | '/p/$username'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/multi'
    | '/queue'
    | '/solo'
    | '/p/$username'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  MultiRoute: typeof MultiRoute
  QueueRoute: typeof QueueRoute
  SoloRoute: typeof SoloRoute
  PUsernameRoute: typeof PUsernameRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  MultiRoute: MultiRoute,
  QueueRoute: QueueRoute,
  SoloRoute: SoloRoute,
  PUsernameRoute: PUsernameRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/multi",
        "/queue",
        "/solo",
        "/p/$username"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/multi": {
      "filePath": "multi.tsx"
    },
    "/queue": {
      "filePath": "queue.tsx"
    },
    "/solo": {
      "filePath": "solo.tsx"
    },
    "/p/$username": {
      "filePath": "p.$username.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
